plot(scatter, "chart")
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter, "chart")
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter, "chart")
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter, "chart")
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter, "chart")
summary(cars)
library(googleVis)
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter)
gdp <- read.csv("~/NYCDSA/Jumpstart/googleVis/data/global_gdp.csv")
gdp$X2014 <- round(gdp$X2014/1e9, digits = 3)
names(gdp) <- c("Country", "GDP")
head(gdp)
gdp <- read.csv("/NYCDSA/Jumpstart/googleVis/data/global_gdp.csv")
gdp <- read.csv("NYCDSA/Jumpstart/googleVis/data/global_gdp.csv")
gdp$X2014 <- round(gdp$X2014/1e9, digits = 3)
names(gdp) <- c("Country", "GDP")
head(gdp)
plot(gvisGeoChart(gdp, "Country", "GDP",
options=list(projection="kavrayskiy-vii")), "chart")
plot(gvisGeoChart(gdp, "Country", "GDP",
options=list(projection="kavrayskiy-vii")))
plot(gvisGeoChart(gdp, "Country", "GDP", options=list(region=150, height=300)))
emissions <- read.csv("NYCDSA/Jumpstart/googleVis/data/state_emissions.csv")
head(emissions[,c("State", "Absolute")], n = 5)
state_em <- gvisGeoChart(emissions, "State", "Absolute",
options=list(region="US",
displayMode="regions",
resolution="provinces",
colorAxis="{colors: ['green', 'white', 'red']}"))
plot(state_em)
?table
table(shelter_train$AnimalType)
dog_train <- shelter_train %>% filter(AnimalType == "Dog") %>% select(-AnimalType)
colnames(cat_train)
sort(table(cat_train$Breed))
sum(table(cat_train$Breed))
?level
??level
nlevels(cat_train$Breed, cat_train$Color)
nlevels(cat_train$Breed)
nlevels(cat_train$Color)
str(cat_train$ageInMonth)
toMonth <- function(x) {
sapply(x, function(x){
age <- unlist(strsplit(x, split = " "))
if(grepl("day", age[2]))
return(as.numeric(age[1]) / 30)
else if(grepl("week", age[2]))
return(as.numeric(age[1]) / 4)
else if(grepl("month", age[2]))
return(as.numeric(age[1]))
else if(grepl("year", age[2]))
return(as.numeric(age[1]) * 12)
else return(NA)
})
}
cat_train <- cat_train %>% mutate(ageInMonth = toMonth(AgeuponOutcome),
OutcomeType = as.factor(OutcomeType),
OutcomeSubtype = as.factor(OutcomeSubtype),
SexuponOutcome = as.factor(SexuponOutcome),
Breed = as.factor(Breed),
Color = as.factor(Color))
str(cat_train$ageInMonth)
ggplot(cat_train, aes(x=ageInMonth)) +
geom_histogram(binwidth = 10)
ggplot(cat_train, aes(x=ageInMonth))
geom_area(bin="bin")
ggplot(cat_train, aes(x=ageInMonth)) +
geom_histogram(binwidth = 10)
geom_area(bin="bin")
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_area(bin="bin")
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_area(stat="bin")
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_area(binwidth = 30)
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_area(bin = 30)
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_area()
str(cat_train)
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_histogram()
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_histogram(stat_bin(bins=30))
ggplot(cat_train, aes(x=ageInMonth)) +
#geom_histogram(binwidth = 10)
geom_histogram(binwidth = 30)
sort(table(shelter_train$AgeuponOutcome)[shelter_train$AnimalType=="Cat"])
ggplot(cat_train, aes(x=ageInMonth)) +
geom_histogram(binwidth = 10)
View(shelter_train)
View(cat_train)
ggplot(cat_train, aes(x=ageInMonth)) +
geom_histogram(binwidth = 2)
ggplot(cat_train, aes(x=ageInMonth*6)) +
geom_histogram(binwidth = 2)
ggplot(cat_train, aes(x=ageInMonth*6)) +
geom_histogram(binwidth = 10)
ggplot(cat_train, aes(x=ageInMonth*6)) +
geom_histogram(binwidth = 30)
ggplot(cat_train, aes(x=ageInMonth*12)) +
geom_histogram(binwidth = 30)
ggplot(cat_train, aes(x=ageInMonth*12)) +
geom_histogram(binwidth = 20)
ggplot(cat_train, aes(x=OutcomeType)) +
geom_bar(binwidth = 20)
ggplot(cat_train, aes(x=OutcomeType)) +
geom_bar()
ggplot(cat_train, aes(x=OutcomeType), ylim=c(1,5000)) +
geom_bar()
ggplot(dog_train, aes(x=OutcomeType), ylim=c(1,5000)) +
geom_bar()
ggplot(cat_train, aes(x=OutcomeType), ylim=c(1,5000)) +
geom_bar()
ggplot(cat_train, aes(OutcomeType, fill=OutcomeSubtype), ylim=c(1,5000)) +
geom_bar(position="fill")
ggplot(cat_train, aes(OutcomeType, fill=SexuponOutcome), ylim=c(1,5000)) +
geom_bar(position="fill")
table(cat_train$SexuponOutcome)
IsMix <- ifelse(grepl('Mix', cat_train$Breed), 1, 0)
ggplot(cat_train, aes(OutcomeType, fill=IsMix)) +
geom_bar(position="fill")
ggplot(aes(cat_train$OutcomeType, fill=IsMix)) +
geom_bar(position="fill")
cat_train$IsMix <- ifelse(grepl('Mix', cat_train$Breed), 1, 0)
ggplot(cat_train, aes(OutcomeType, fill=IsMix)) +
geom_bar(position="fill")
table(cat_train$IsMix)
ggplot(cat_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="OutcomeType")
ggplot(cat_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="fill")
cat_train$IsMix <- ifelse(grepl('Mix', cat_train$Breed), "Mix", "Non-mix")
ggplot(cat_train, aes(OutcomeType, fill=IsMix)) +
geom_bar(position="fill")
ggplot(cat_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="fill")
ggplot(cat_train, aes(IsMix, fill=OutcomeType, y="")) +
geom_bar(position="fill")
dog_train$IsMix <- ifelse(grepl('Mix', dog_train$Breed), "Mix", "Non-mix")
table(dog_train$IsMix)
ggplot(dog_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="fill")
ggplot(dog_train, aes(OutcomeType, fill=IsMix)) +
geom_bar(position="fill")
table(cat_train$Breed)
table(cat_train$Breed)
sort(table(cat_train$Breed))
ggplot(cat_train, aes(Breed)) + geom_bar()
summary(cat_train$ageInMonth)
SimpleBreed <- sapply(cat_train$Breed, function(x) gsub(' Mix', '', )[[1]][1]))
SimpleBreed <- sapply(cat_train$Breed, function(x) gsub(' Mix', '', )[[1]][1])
?gsub
SimpleBreed <- sapply(cat_train$Breed, function(x) gsub('Mix','', ), ignore.case=TRUE)
summary(cat_train)
View(cat_train)
table(cat_train$Name)
table(is.na(cat_train$Name))
levels(cat_train$Name)
sum(cat_train$Name == "")
sum(cat_train$Name == " ")
cat_train$Name[cat_train$Name == ""]
NA -> cat_train$Name[cat_train$Name == ""]
summary(is.na((cat_train$Name)))
View(cat_train)
cat_train$OutcomeSubtype[cat_train$OutcomeSubtype == ""]  <- NA
table(cat_train$SexuponOutcome)
table(cat_train$Breed)
sort(table(cat_train$Breed))
summary(cat_train$DateTime)
summary(strptime(cat_train$DateTime, "%Y-%m-%d %H:%M:%S", tz = "CST6CDT"))
cat_train$OutcomeType[cat_train$OutcomeSubtype == NA]
cat_train$OutcomeType[is.na(cat_train$OutcomeSubtype)]
table(cat_train$OutcomeType[is.na(cat_train$OutcomeSubtype)])
frequency(cat_train$OutcomeType[is.na(cat_train$OutcomeSubtype)])
table(cat_train$OutcomeType)
table(cat_train$SexuponOutcome)
ggplot(cat_train, aes(x=OutcomeType, y=SexuponOutcome)) +
geom_bar()
ggplot(cat_train, aes(x=OutcomeType, y=SexuponOutcome)) +
geom_bar(stat="identity")
ggplot(cat_train, aes(x=OutcomeType, y=SexuponOutcome)) +
geom_bar(positin="stack")
ggplot(dog_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="stack")
ggplot(dog_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="fill")
ggplot(cat_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(positin="fill")
ggplot(cat_train, aes(IsMix, fill=OutcomeType)) +
geom_bar(position="fill")
sort(table(cat_train$Breed))
sort(table(cat_train$Color))
sub(" Mix", "", cat_train$Breed)
cat_train$Breed2 <- sub(" Mix", "", cat_train$Breed)
sort(table(cat_train$Breed2))
cat_train$Breed2 <- sub(" Mix", "", cat_train$Breed)
sort(table(cat_train$Breed2))
names(sort(table(cat_train$Breed2)))
names(sort(table(cat_train$Breed2), decreasing = TRUE))
names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:10]
names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:12]
names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:10]
cat_train$BreedTop10 <- ifelse(cat_train$BreedTop10 %in% names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:10], cat_train$BreedTop10, "Others")
cat_train$BreedTop10 <- ifelse(cat_train$Breed2 %in% names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:10], cat_train$BreedTop10, "Others")
cat_train$BreedTop10 <- ifelse(cat_train$Breed2 %in% names(sort(table(cat_train$Breed2), decreasing = TRUE))[1:10], cat_train$Breed2, "Others")
table(cat_train$BreedTop10)
sort(table(cat_train$Color), decreasing = TRUE)
levels(cat_train$Color)
apply(levels(cat_train$Color), function(x) sub("/", " ", x))
sapply(levels(cat_train$Color), function(x) sub("/", " ", x))
paste(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)))
paste(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)), collapse = " ")
unique(paste(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)), collapse = " "))
unlist(strsplit(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)), collapse = " "))
unlist(strsplit(sapply(levels(cat_train$Color), function(x) sub("/", " ", x))))
?strsplit
unlist(strsplit(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)), split = " "))
unique(unlist(strsplit(sapply(levels(cat_train$Color), function(x) sub("/", " ", x)), split = " ")))
levels(cat_train$Color)[grepl("Tiger", levels(cat_train$Color))]
levels(cat_train$Color)[grepl("Agouti", levels(cat_train$Color))]
levels(cat_train$Color)[grepl("Point", levels(cat_train$Color))]
levels(cat_train$Color)[grepl("Calico", levels(cat_train$Color))]
levels(cat_train$Color)[grepl("Tortie", levels(cat_train$Color))]
sort(table(cat_train$Color), decreasing = TRUE)
plot(table(cat_train$Color)
)
plot(sort(table(cat_train$Color), decreasing = TRUE))
sort(table(cat_train$Color))
sort(table(cat_train$BreedTop10))
ggplot(cat_train, aes(BreedTop10, fill=OutcomeType)) + geom_bar(position="fill")
countries <- readRDS("~/Desktop/case7/data/countries.rds")
counties <- readRDS("~/Desktop/case7/data/counties.rds")
view(counties)
View(counties)
install.packages(c("maps","mapproj"))
library(mapproj)
percents <- as.integer(counties$white)
shades <- colorRampPalette(c("white", "darkgreen"))(100)
fills <- shades[percents]
head(percents)
map("county", fill = TRUE, col=fills, resolution = 0, lty = 0,
projection = "polyconic", myborder = 0, mar = c(0,0,0,0))
library(maps)
source("case7/helpers.R")
counties <- readRDS("case7/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
?pmax
?integer
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
map("county", fill = TRUE, col = fills, resolution = 0,
lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
}
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
percent_map<-function(var,color,legend.title,min=0,max=100) {
shades <- colorRampPalette(c("white", color))(100)
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
map("county", fill = TRUE, col = fills, resolution = 0,
lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
percent_map(counties$white,"blue","% blue")
percent_map(counties$hispanic,"blue","% blue")
?switch
runApp('case7')
runApp('case7')
percent_map<-function(var,color,legend.title,min=0,max=100) {
shades <- colorRampPalette(c("white", color))(100)
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
map("county", fill = TRUE, col = fills, resolution = 0,
lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
runApp('case7')
runApp('case7')
runApp('case7')
runApp('case7')
runApp('case7')
runApp('case7')
runApp('case7')
runApp('stockVis')
runApp("stockVis")
runApp("stockVis")
install.packages("quantmod")
library(quantmod)
runApp("stockVis")
rm(IsMix)
rm(X)
rm(x)
rm(y)
log_ageInMonth = log(cat_train$ageInMonth)
ggplot(cat_train, aes(log_ageInMonth)) + geom_histogram()
ggplot(cat_train, aes(ageInMonth)) + geom_histogram()
sum(cat_train$ageInMonth==12)
count(cat_train$ageInMonth==12)
?TA
runApp('stockVis')
runApp("stockVis")
runApp('stockVis')
colnames(cat_train)
table(cat_train$Name)
table(cat_train$Name[cat_train$Name==""])
table(cat_train$Name[cat_train$Name=="NA"])
summary(cat_train$Name[cat_train$Name=="NA"])
summary(is.na(cat_train$Name=="NA")==FALSE)
summary(is.na(cat_train$Name=="NA"))
sum(is.na(cat_train))
cat_train$Name[cat_train$Name == ""] <- NA
cat_train$DateTime[cat_train$DateTime == ""] <- NA
cat_train$OutcomeType[cat_train$OutcomeType] <- NA
cat_train$OutcomeSubtype[cat_train$OutcomeSubtype == ""]<- NA
cat_train$SexuponOutcome[cat_train$SexuponOutcome==""] <- NA
cat_train$AgeuponOutcome[cat_train$AgeuponOutcome==""] <- NA
cat_train$Breed[cat_train$Breed==""] <- NA
cat_train$Color[cat_train$Color==""] <- NA
sum(is.na(cat_train))
which(apply(is.na(cat_train), 1, sum) > 0)
which(apply(is.na(cat_train), 2, sum) > 0)
which(apply(is.na(cat_train), 1, sum) > 0)
which(apply(is.na(cat_train), 2, sum) > 0)
which(apply(cat_train,2,function(x){any(is.na(x))}))
table(shelter_train$AnimalType)
colnames(shelter_train)
str(shelter_train)
shelter_train$Name[shelter_train$Name == ""] <- NA
shelter_train$DateTime[shelter_train$DateTime == ""] <- NA
shelter_train$OutcomeType[shelter_train$OutcomeType] <- NA
shelter_train$OutcomeSubtype[shelter_train$OutcomeSubtype == ""]<- NA
shelter_train$SexuponOutcome[shelter_train$SexuponOutcome==""] <- NA
shelter_train$AgeuponOutcome[shelter_train$AgeuponOutcome==""] <- NA
shelter_train$Breed[shelter_train$Breed==""] <- NA
shelter_train$Color[shelter_train$Color==""] <- NA
shelter_train$OutcomeType[shelter_train$OutcomeType==""] <- NA
shelter_train$Name[shelter_train$Name == ""] <- NA
shelter_train$DateTime[shelter_train$DateTime == ""] <- NA
shelter_train$OutcomeType[shelter_train$OutcomeType==""] <- NA
shelter_train$OutcomeSubtype[shelter_train$OutcomeSubtype == ""]<- NA
shelter_train$SexuponOutcome[shelter_train$SexuponOutcome==""] <- NA
shelter_train$AgeuponOutcome[shelter_train$AgeuponOutcome==""] <- NA
shelter_train$Breed[shelter_train$Breed==""] <- NA
shelter_train$Color[shelter_train$Color==""] <- NA
which(apply(shelter_train,2,function(x){any(is.na(x))}))
sum(is.na(shelter_train))
which( rowSums( is.na(ts_data) ) != 0 )
which( rowSums( is.na(shelter_train) ) != 0 )
cat_train <- shelter_train %>% filter(AnimalType == "Cat") %>% select(-AnimalType)
dog_train <- shelter_train %>% filter(AnimalType == "Dog") %>% select(-AnimalType)
cat_train$BreedOnly <- sub(" Mix", "", cat_train$Breed)
sort(table(cat_train$BreedOnly))
cat_train$BreedTop10 <- ifelse(cat_train$Breed2 %in% names(sort(table(cat_train$Breed2),
decreasing = TRUE))[1:10],
cat_train$Breed2, "Others")
cat_train$BreedTop10 <- ifelse(cat_train$BreedOnly%in% names(sort(table(cat_train$BreedOnly),
decreasing = TRUE))[1:10],
cat_train$BreedOnly, "Others")
table(cat_train$BreedTop10)
table(cat_train$BreedTop10, decreasing=TRUE)
sort(table(cat_train$BreedTop10))
sort(table(cat_train$BreedTop10), decreasing = TRUE)
ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) +
geom_bar(position="fill")
ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) +
geom_bar())
ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) +
geom_bar()
ggplot(cat_train, aes(x=BreedTop10, y=OutcomeType[OutcomeType=="Adoption"])) +
geom_bar()
ggplot(cat_train, aes(x=BreedTop10, y=ifelse(OutcomeType=="Adoption"])) +
geom_bar()
ggplot(cat_train, aes(x=BreedTop10, y=ifelse(OutcomeType=="Adoption")) +
geom_bar()
ggplot(cat_train, aes(x=BreedTop10, y=ifelse(OutcomeType=="Adoption"))) + geom_bar()
ggplot(cat_train, aes(x=BreedTop10, y=ifelse(OutcomeType=="Adoption"))) +
geom_bar()
?is
ggplot(cat_train, aes(x=OutcomeType, y=BreedTop10)) +
geom_bar()+
facet_grid(BreedTop10 ~ )
ggplot(cat_train, aes(x=OutcomeType)) +
geom_bar()+
facet_grid(BreedTop10 ~ )
ggplot(cat_train, aes(x=OutcomeType)) +
geom_point()+
facet_grid(BreedTop10 ~ )
ggplot(cat_train, aes(x=OutcomeType)) +
geom_histogram()+
facet_grid(BreedTop10 ~ )
ggplot(cat_train, aes(x=OutcomeType, y=BreedTop10)) +
geom_bar()+
;
ggplot(cat_train, aes(x=OutcomeType, y=BreedTop10)) +
geom_bar()
ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) +
geom_bar()
ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) +
geom_bar(position = "fill")
install.packages("plotly")
library(plotly)
ggplotly(pic)
pic <- ggplot(cat_train, aes(OutcomeType, fill=BreedTop10)) + geom_bar(position = "fill")
ggplotly(pic)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(googleVis)
source("./lib.R")
head(animal_train)
colnames(animal_train)
ggplotly(bar_plot(cat_train, "hasName", "OutcomeType"))
cat_train <- cat_train %>%
mutate(hasName = ifelse(is.na(Name), "No", "Yes"))
ggplotly(bar_plot(cat_train, "hasName", "OutcomeType"))
ggplotly(bar_plot(cat_train, "hasName", "OutcomeType", position = "fill"))
table(animal_train$AnimalType)
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(googleVis)
source("./lib.R")
## set wording directory
setwd("~/Workspace/kaggle/shelterAnimal/")
## load data
animal_train <- read.csv("train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
setwd("~/Desktop/GitHub/ShelterAnimals/")
animal_train <- read.csv("train.csv",
header = TRUE,
na.strings = "",
stringsAsFactors = FALSE)
table(animal_train$AnimalType)
library(plotly)
ggplotly(bar_plot(animal_train, "hasName", "OutcomeType", position = "fill") +
facet_grid(. ~ AnimalType))
?strptime
